# Generated by Django 3.1.7 on 2021-04-05 14:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(max_length=128, verbose_name='Full Name')),
                ('type', models.CharField(choices=[('1', 'Client'), ('2', 'ServiceProvider')], default='1', help_text='usertype', max_length=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='SubService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.TextField(max_length=256)),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_services', to='users.service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_accepted', models.BooleanField(default=False)),
                ('sub_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='users.subservice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('company_name', models.TextField(max_length=128, null=True)),
                ('full_name', models.TextField(max_length=128, null=True)),
                ('address', models.TextField(max_length=128, null=True)),
                ('postal_code', models.TextField(max_length=128, null=True)),
                ('country', models.TextField(max_length=128, null=True)),
                ('phone', models.TextField(max_length=128, null=True)),
                ('business_phone', models.TextField(max_length=128, null=True)),
                ('licensed', models.BooleanField(default=False)),
                ('coordinate_x', models.TextField(max_length=128)),
                ('coordinate_y', models.TextField(max_length=128)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sp_model', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='service_provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='users.serviceprovider'),
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('address', models.TextField(max_length=128, null=True)),
                ('postal_code', models.TextField(max_length=128, null=True)),
                ('phone', models.TextField(max_length=128, null=True)),
                ('country', models.TextField(max_length=128, null=True)),
                ('service_providers', models.ManyToManyField(related_name='clients', to='users.ServiceProvider')),
                ('services', models.ManyToManyField(blank=True, related_name='clients', to='users.Service')),
                ('sub_services', models.ManyToManyField(blank=True, related_name='clients', to='users.SubService')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_model', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
